" Specify a directory for plugins " " - For Neovim: ~/.local/share/nvim/plugged
" " - Avoid using standard Vim directory names like 'plugin'

" ============================ Basics ============================
set guifont=Hack\ Nerd\ Font\ Regular:h12	    " DevIcons
set encoding=utf8
set nocompatible
set modelines=0
set softtabstop=4
set noexpandtab
set smarttab
set autoindent
"set shiftwidth=0				    " indents use same distance as tab key (always match tabstop)

inoremap jj <Esc>
let mapleader = ","

" Some Linux distributions set filetype in /etc/vimrc.
" Clear filetype flags before changing runtimepath to force Vim to reload them.
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on

" Syntax
syntax on

function! SynGroup()                                                            
    let l:s = synID(line('.'), col('.'), 1)                                       
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun
map gm :call SynGroup()<CR>

function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Show vim syntax highlight groups for character under cursor
nmap <silent> gh :echo 'hi<'.synIDattr(synID(line('.'), col('.'), 1), 'name')
	\.'> trans<'.synIDattr(synID(line('.'), col('.'), 0), 'name').'> lo<'
	\.synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name').'>'<CR>


" Tab settings by language			    " @? Should this be done a different way?
autocmd Filetype python setlocal ts=4 sts=4 sw=4
autocmd Filetype cpp setlocal tabstop=4 shiftwidth=0 softtabstop=4
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype sh setlocal ts=2 sts=2 sw=2
autocmd Filetype bash setlocal ts=2 sts=2 sw=2
autocmd Filetype json setlocal ts=2 sts=2 sw=2 expandtab
autocmd Filetype yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd Filetype solidity setlocal ts=4 sts=4 sw=4
autocmd Filetype go setlocal ts=4 sts=4 sw=4

" Spell-check Markdown files and Git Commit Messages
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell
" Enable dictionary auto-completion in Markdown files and Git Commit Messages
autocmd FileType markdown setlocal complete+=kspell
autocmd FileType gitcommit setlocal complete+=kspell

" ============================ Formatting ============================
" Re-wrap paragraphs after leaving insert mode
" augroup mdFormatting
"     autocmd!
"     autocmd InsertLeave *.md normal gwap<CR>
" augroup END
" nnoremap <Leader>c gwap<CR>

" ============================ Display ============================
set laststatus=2				    " Always show status line
set scrolloff=3
"set smartindent " ? 
set showmode
set showcmd
set hidden
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
"set undofile " Use undo-tree
set number
set relativenumber

hi CursorLine cterm=none
hi CursorLine gui=none

" Handle long lines
set wrap
set textwidth=80
set formatoptions=qrn1
set colorcolumn=85


" ============================ Navigation ============================
" ------ Tab Pages
nmap } gt
nmap { gT
nmap [ {
nmap ] }
nmap <c-w>p :vertical wincmd f<CR>	    " open file under cursor in vert split

" ------ Buffers
set switchbuf=usetab,newtab
nnoremap <Leader>b :ls<CR>:b<Space>
nnoremap <Leader>h :bprevious<CR>
nnoremap <Leader>l :bnext<CR>
nnoremap <Leader>k :bfirst<CR>
nnoremap <Leader>j :blast<CR>

" ------ Windows
nnoremap <leader>w <C-w>v<C-w>l			    " Split window vertically and swap to new window

" ------ Completion
inoremap <expr> <c-j> pumvisible() ? "\<c-n>" : "\<c-n>"
inoremap <expr> <c-k> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<cr>"
nnoremap <expr> <c-j> pumvisible() ? "\<c-n>" : "\<c-n>"
nnoremap <expr> <c-k> pumvisible() ? "\<c-p>" : "\<s-tab>"
nnoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<cr>"
set completeopt=menu,longest,preview

set wildmenu					    " Command line completion
"set wildmode=list:longest
set wildmode=longest:full,full			    " First tab brings up options, second tab cycles

" ------ Search
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault 
set incsearch 
set hlsearch
set inccommand=nosplit
set showmatch 
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %
nnoremap <leader>v v`]				    " select just pasted text

vnoremap <silent> * :<C-U>			    " Search for selected text, forwards or backwards.
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>

" ------ Pairs
nnoremap <leader>p :set paste<cr>
nnoremap <leader>pp :set nopaste<cr>


nnoremap <leader>n :set number<cr>
nnoremap <leader>nn :set nonumber<cr>
nnoremap <leader>nr :set rnu!<cr>
nnoremap <leader>nrr :set rnu<cr>

" nnoremap <leader>d :=&diff ? "diffoff" : "diffthis"<CR><CR>

" Quickly edit/reload the vimrc file
" nmap <silent> <leader>ev :e $MYVIMRC<CR>	    
" nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> <leader>ev :e ~/.vimrc<CR>	    
nmap <silent> <leader>sv :so ~/.vimrc<CR>

" ============================ Plugins ============================ 
" ++++++++++++++++ vim-javascript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
let g:vim_jsx_pretty_colorful_config = 1

" ++++++++++++++++ Vimify (Spotify)
let g:spotify_token='M2MyZjg5NzUyYmRlNGU4NGEzZWQzZGY3MWZlODllYjMK'

" ++++++++++++++++ Nerd Tree
map <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeGitStatusUseNerdFonts = 1

" ++++++++++++++++ Ctrl Space
nnoremap <c-space> :CtrlSpace<CR>

" ++++++++++++++++ Buffer Bye Bye
:nnoremap <Leader>q :Bdelete<CR>

" ++++++++++++++++ coc.nvim
nmap <leader>gd <Plug>(coc-definition)
silent! call repeat#set("\<Plug>(coc-definition)", v:count)
nmap <leader>gr <Plug>(coc-references)
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" ++++++++++++++++ fzf

" ++++++++++++++++ Airline
let g:airline_theme = 'one'
let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#nerdtree_status = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 1		    " show buffers in split windows in tab line
let g:airline#extensions#tabline#ctrlspace_show_tab_nr = 1
"let g:airline_exclude_filenames = ['\c\vNERD_tree',"NERD_TREE*"] " match queries
let g:airline#extensions#tabline#excludes = ['\c\vNERD_tree', 'NERD_tree_*', 'NERD_TREE', 'NERD_TREE_*', 'tmp.js']
"let g:airline#extensions#tabline#keymap_ignored_filetypes =
			"\ ['vimfiler', 'nerdtree']
"let g:airline#extensions#tabline#formatter = 'unique_tail_improved' " path formatting
"let g:airline#extensions#tabline#switch_buffers_and_tabs = 0	    " for ctrlspace
let g:airline_powerline_fonts = 1

" @fix
" Ignore patterns from buffer names (ignore Nerdtree!)
"let g:airline#extensions#tabline#ignore_bufadd_pat = 'nerd_tree|undotree|vimfiler|tagbar|NERD_tree'
" let airline#extensions#tabline#disable_refresh = 1

"let g:airline#extensions#tabline#ignore_bufadd_pat = 'nerd_tree|undotree|vimfiler|NERD_tree'

"let g:airline#extensions#tabline#keymap_ignored_filetypes =
        \ ['vimfiler', 'nerdtree', 'qf', 'vim-plug', 'help', 'diff', 'man', 'fugitive', 'nerdtree', 'tagbar', 'codi']


" Truncate / format long branch names
" to truncate all path sections but the last one, e.g. a branch 'foo/bar/baz' becomes 'f/b/baz', use 2
  let g:airline#extensions#branch#displayed_head_limit = 16
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#format = 2
let g:airline#extensions#branch#empty_message = 'NO GIT'


" ++++++++++++++++ CoC
let g:coc_global_extensions = [
\ 'coc-tsserver'
\ 'coc-sh'
\ 'coc-tabnine'
\ 'coc-prettier'
\ 'coc-markdownlint'
\ 'coc-json'
\ 'coc-highlight'
\ 'coc-go'
\ 'coc-git'
" \ 'coc-ultisnips',
" \ 'coc-json',
" \ 'coc-html',
" \ 'coc-css',
" \ 'coc-yaml',
" \ 'coc-highlight',
\ ]

" ---------- Theme
"  +++ One Dark (see README.md)
"  https://github.com/vim-airline/vim-airline/issues/710
" call one#highlight('airline_c', 'cccccc', 'ff0000', 'underline')

" Debug tabline filtering
" nmap <leader><F5>  <Plug>XTablineToggleFiltering

" ++++++++++++++++ Spaceline
"let g:spaceline_seperate_style= 'arrow'
"let g:spaceline_colorscheme = 'space'
"let g:spaceline_seperate_mode = 1

" ++++++++++++++++ DevIcons
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif
set conceallevel=3

" ++++++++++++++++ Suda
let g:suda_smart_edit = 1 " Automatically open write protected files using suda

" ++++++++++++++++ Plugged
" Automatically install plugged
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" ------ Status
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'taigacute/spaceline.vim'

" Status
" ------ Workflow
Plug 'scrooloose/nerdtree' |
			\Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'gcmt/taboo.vim'
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'moll/vim-bbye'

" ------  Utilities
Plug 'lambalisue/suda'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" ------ Text Manipulation
Plug 'tpope/vim-surround' 
Plug 'tpope/vim-repeat' 
Plug 'tpope/vim-fugitive' 
Plug 'tpope/vim-commentary' 
Plug 'AndrewRadev/splitjoin.vim'
Plug 'kkoomen/vim-doge'

" ------ Linting and Completion
"Plug 'w0rp/ale'
Plug 'neoclide/coc.nvim', {'branch': 'release' , 'do': 'yarn install --frozen-lockfile'}
" :CocInstall coc-json
" :CocInstall coc-tsserver

" ------ Syntax
Plug 'norcalli/nvim-colorizer.lua'
Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'MaxMEllon/vim-jsx-pretty'
" Plug 'yuezk/vim-js'

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'tovarishfin/vim-solidity'
Plug 'prabirshrestha/vim-lsp'

" Plug 'kevinoid/vim-jsonc'
" Plug 'moll/vim-node', {'for': ['javascript', 'javascriptreact', 'javascript.jsx']}
" Plug 'leafgarland/typescript-vim', {'for': ['javascript', 'javascriptreact', 'javascript.jsx']}
" Plug 'pangloss/vim-javascript', {'for': ['javascript', 'javascriptreact', 'javascript.jsx']}
Plug 'rust-lang/rust.vim'
"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/asyncomplete.vim'
"Plug 'prabirshrestha/asyncomplete-lsp.vim'
"Plug 'bfrg/vim-cpp-modern'
"Plug 'lervag/vimtex'
"Plug 'reedes/vim-pencil'

"------- Misc
"Plug 'HendrikPetertje/vimify'

" ------ Themes
" Plug 'rakr/vim-one'
Plug 'jgitgud/vim-one'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'NLKNguyen/papercolor-theme'
Plug 'mhartington/oceanic-next'
"Plug 'tomasiser/vim-code-dark'
"Plug 'dracula/vim', { 'as': 'dracula' }
"Plug 'tomasr/molokai'
Plug 'ryanoasis/vim-devicons' " always load last
call plug#end()

" ============================ Color ============================ 
set background=dark 
let g:one_allow_italics = 1			    " Italic for comments "colorscheme PaperColor
colorscheme one
" colorscheme  codedark
" color dracula

" ------ Color Fix
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" Must come after set termguicolors
lua require'colorizer'.setup()
